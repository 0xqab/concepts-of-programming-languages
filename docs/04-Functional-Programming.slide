Functional Programming with Go
Concepts of Programming Languages
25 Oct 2018
Tags: go, programming, master

Johannes Weigend (QAware GmbH)
University of Applied Sciences Rosenheim
johannes.weigend@qaware.de
http://www.qaware.de
@johannesweigend

* What is Functional Programming?
.image ./img/04-lambda.png 200 350
- the combination of pure functions;
- avoiding shared state, mutable data, and side-effects;
- the prevalence of declarative approach rather than imperative approach.

* Functional Programming – Characteristics

The most prominent characteristics of functional programming are as follows

- Functional programming languages are designed on the concept of mathematical functions that use conditional expressions and recursion to perform computation.
- Functional programming supports higher-order functions and lazy evaluation features.
- Functional programming languages don’t support flow Controls like loop statements and conditional statements like If-Else and Switch Statements. They directly use the functions and functional calls.
- Like OOP, functional programming languages support popular concepts such as Abstraction, Encapsulation, Inheritance, and Polymorphism

* Functional programming languages are categorized into two groups
- *Pure* Functional Languages
These types of functional languages support only the functional paradigms and have no state. For example − Haskell.

- *Impure* Functional Languages
These types of functional languages support the functional paradigms and imperative style programming. For example − LISP.

* Functional programming offers the following advantages

- Bugs-Free Code

Functional programming does not support state, so there are no side-effect results and we can write error-free codes.

- Efficiency

Functional programs consist of independent units that can *run* *concurrently*. As a result, such programs are more efficient.

- Lazy Evaluation 

Functional programming supports *lazy* *evaluation* like Lazy Lists, Lazy Maps, etc.

- Distribution 
Functional programming supports distributed computing

* Functional Composition
Functions can be composed to new functions
    g(f(x)) -> (g ◦ f)(x) 

        // Function f()
        f := func(x int) int { 
            return x * x 
        }

        // Function g()
        g := func(x int) int { 
            return x + 1 
        }

        // Functional Composition: (g◦f)(x)
        gf := func(x int) int { 
            return g(f(x)) 
        }
        
        fmt.Printf("%v\n", gf(2)) // --> 5

* Functional Composition (2)
Functions can be composed with functions as parameters
    g(f(x)) -> (g ◦ f)(x) 

    // Type any makes the code readable
    type any interface{}
    type function func(any) any

	compose := func(g, f function) function {
		return func(x any) any {
			return g(f(x))
		}
	}

    square := func(x any) any { return x.(int) * x.(int) }
          
    fmt.Printf("%v\n", compose(square, square)(2)) // --> 4*4 = 16
    
    fmt.Printf("%v\n", compose(compose(square, square), square)(2)) // --> 256
  
* Clojures (Only impure if you modify the closed-over variable)
.play ../fp/clojures/main.go /intSeq/,/EOF OMIT/

* History: The Lambda Calculus
.image https://upload.wikimedia.org/wikipedia/en/thumb/4/4d/Knights_of_the_Lambda_Calculus.svg/316px-Knights_of_the_Lambda_Calculus.svg.png 200 200
- What is it?
- Why is it useful?
- Where did it came from?
.link https://www.youtube.com/watch?v=eis11j_iGMs Professor Graham Hutton explains the Lambda Calculus (Cool Stuff :-)

Hint: To understand this video you will watch it at least three times :-)

* Summary of the Introduction to Lambda Calculus
- Pure Functions have no internal state
- The Lambda Calculus is very different to the Turing Machine in this way
- The lambda calculus knows only three primitives: Variables (x,y,z), building functions λx.x, applying functions "(λx.x) 5" with values
- There are no datatypes (number, logical values) - values can be functions, No build in recursion!
- It can encode any computation (Church-Turing thesis)
- Lambda Calculus is present in most major programming languages

* Lambda Calculus in Go
.link https://play.golang.org/p/1bLmezdD2zt

        // Lambda Calculus in Golang --> See Video Graham Hutton
        // https://www.youtube.com/watch?v=eis11j_iGMs
         
        // This is the key: A Recursive function definition for all functions!!!
        type fnf func(fnf) fnf

        ID := func(x fnf) fnf { return x }

        // TRUE as function: λx.λy.x
        True := func(x fnf) fnf {
            return func(y fnf) fnf {
                return x
            }
        }

        // FALSE as function: λx.λy.y
        False := func(x fnf) fnf {
            return func(y fnf) fnf {
                return y
            }
        }

* Application
        fmt.Printf("Id = %p\n", ID)
        fmt.Printf("True = %p\n", True)
        fmt.Printf("False = %p\n", False)
        
        // debugging functions
        f := func(x fnf) fnf { fmt.Printf("f()\n"); return x }
        g := func(y fnf) fnf { fmt.Printf("g()\n"); return y }
         
        // select and call first function f(ID)
        False(False)(True)(f)(g)(ID)
         
        // select and call second function g(ID)
        True(False)(True)(f)(g)(ID)
     

* Lambda Calculus in Go: NOT
       
        // NOT as function: λb.b false true
        Not := func(b fnf) fnf {
            return b(False)(True)
        }

        // should print false
        fmt.Printf("Not(True) = %p\n", Not(True))

        // should print true
        fmt.Printf("Not(False) = %p\n", Not(False))
             
        // select and call first function f(ID)
        Not(False)(f)(g)(ID)

        // select and call second function g(ID)
        Not(True)(f)(g)(ID)


* Lambda Calculus in JavaScript
        TRUE = a => b => a; 
        FALSE = a => b => b; 
        NOT = f => a => b => f(b)(a);
         
        f = x => x + 10
        g = x => x + 20
         
        TRUE(f)(g)(3)       // -> 13
        FALSE(f)(g)(3)      // -> 23
         
        NOT(TRUE)(f)(g)(3)  // -> 23
        NOT(FALSE)(f)(g)(3) // -> 13

.link https://www.youtube.com/watch?v=3VQ382QG-y4 Fundamentals of Lambda Calculus & Functional Programming in JavaScript

* Famous Functional Languages inspired by the Lamda Calculus
- Haskell
.link https://www.youtube.com/watch?v=1jZ7j21g028
- ML
- Clojure
- F#
- Scala
- JavaScript

* Palindrome Problem in Functional (pure) Languages

- Haskell
   is_palindrome x = x == reverse x

- Clojure
    (defn palindrome? [x]
        (= x (clojure.string/reverse x)))

* Palindrome Problem in Functional (impure) Languages

- F#
    let isPalindrome (x: string) =
        let arr = x.ToCharArray()
        arr = Array.rev arr

- Scala
    def isPalindrome[A](l: List[A]):Boolean = {
        l == l.reverse
    }
- Go
    func IsPalindrome3(x string) bool {
        return x == strings.Reverse(x)
    }

* Functions as First Class Citizens in Go
- Go supports functions as 1st Class Citizens: Clojures und Lambdas
- Functions can be assigned to variables
- Functions can be used as function parameters and return values (High Order Functions)
- Functions can be created inside functions
- The Go standard library uses functional constructs

* Sample from the Go Standard Library
- strings.map
    // Map returns a copy of the string s with all its characters modified
    // according to the mapping function. If mapping returns a negative value, the character is
    // dropped from the string with no replacement.
    func Map(mapping func(rune) rune, s string) string

- Usage
    s := "Hello, world!"
    s = strings.Map(func(r rune) rune {
        return r + 1
    }, s)
    fmt.Println(s) // --> Ifmmp-!xpsme"

* Go does not have an API similar to Java Streams
- It is possible to build such an API in Go
.code ../fp/streams/streams_test.go /array/,/lambda/

* Classic Word Count Sample
.code ../fp/streams/streams_test.go /wordcount/,/ENDWC OMIT/

* Questions
- How can you implement parallel execution for our API?
- How can you implement distributed execution for our API?

* Summary
- You can do functional programming with Go
- Generics and type inference for functions are missing (maybe 2.0?)
- Type definitions for functions make code readable
- You can use functional patterns and generic programming with extra casting (type assertions) 
- Functional patterns like Map/Filter/Reduce are easy to implement in Go
- Reflection can help to avoid casting, but it is slow!